package heapsort

import (
	"reflect"
	"testing"
)
func TestHeapify(t *testing.T){
	heapTests := []struct {
		input  []int
		result  []int
	}{
		{
			input:  []int {61, 7, 10, 12, 16, 17, 60, 55,4},
			result : []int{4 ,7,10  ,12 ,16 ,17  ,60,61 ,55},
		},
		{
			input:  []int{61, 4, 7, 10, 12, 16, 17, 20, 21, 22, 30, 31, 39, 40, 51, 54, 55, 57, 3, 60},
			result: []int{3,4,7,10,12,16,17,54,20,22,30,31,39,40,51,61,55,57,21,60},
		},
		// {
		// 	input:  []int{85, 103, 144, 150, 178, 156, 363, 390, 400, 439, 474, 482, 511, 529, 584, 622, 684, 772, 756, 771},
		// 	idx : 18,
		// 	result: 8,
		// },

	}
	for _, tt := range heapTests {
		result:= heapify(tt.input)
		if reflect.DeepEqual( *result , tt.result) != true {
			t.Errorf("Expected \n%v\tGot \n%v\n",tt.result,*result)
		}
	}
}


func TestHeapsort(t *testing.T){
	heapTests := []struct {
		input  []int
		result  []int
	}{
		{
			input:  []int{61, 4, 7, 10, 12, 16, 17, 60, 55,76},
			result: []int{4, 7, 10, 12, 16, 17, 55, 60, 61,76},
		},

		{
			input:  []int{61, 4, 7, 10, 12, 16, 17, 20, 21, 22, 30, 31, 39, 40, 51, 54, 55, 57, 60, 3},
			result: []int{3, 4, 7, 10, 12, 16, 17, 20, 21, 22, 30, 31, 39, 40, 51, 54, 55, 57, 60, 61},
		},
		{
			input:  []int{85, 103, 144, 150, 178, 156, 363, 390, 400, 439, 474, 482, 511, 529, 584, 622, 684, 772, 756, 771},
			result: []int{85, 103, 144, 150, 156, 178, 363, 390, 400, 439, 474, 482, 511, 529, 584, 622, 684, 756, 771, 772},
		},

		{
			input:  []int{85, 103, 144, 150, 178, 156, 363, 390, 400, 439, 474, 482, 511, 529, 584, 622, 684, 772, 756, 771, 807, 879, 930, 933, 955, 990, 1012, 1021, 1026, 1092, 1113, 1117, 1153, 1182, 1199, 1234, 1242, 1298, 1323, 1474, 1605, 1655, 1690, 1694, 1697, 1715, 1728, 1785, 1841, 1860, 1890, 1929, 1930, 1945, 1973, 1976, 2001, 2018, 2055, 2112, 2165, 2176, 2217, 2240, 2287, 2348, 2366, 2372, 2381, 2464, 2576, 2596, 2602, 2690, 2704, 2716, 2798, 2831, 2839, 2883, 2887, 2913, 2936, 2976, 2985, 3031, 3059, 3076, 3121, 3168, 3185, 3267, 3370, 3387, 3409, 3434, 3441, 3443, 3449, 3470, 3512, 3541, 3544, 3635, 3652, 3659, 3667, 3671, 3716, 3722, 3749, 3758, 3878, 3880, 3884, 3912, 3957, 3958, 4043, 4101, 4135, 4172, 4305, 4391, 4418, 4454, 4473, 4477, 4502, 4557, 4563, 4569, 4596, 4599, 4696, 4698, 4702, 4741, 4758, 4796, 4827, 4847, 4907, 4926, 4984, 4997, 5099, 5122, 5151, 5172, 5174, 5189, 5265, 5276, 5303, 5380, 5381, 5397, 5407, 5418, 5437, 5463, 5474, 5480, 5529, 5575, 5576, 5583, 5587, 5615, 5644, 5664, 5668, 5934, 5976, 6032, 6048, 6055, 6056, 6071, 6082, 6089, 6109, 6167, 6172, 6255, 6262, 6287, 6307, 6320, 6351, 6364, 6401, 6414, 6527, 6544, 6560, 6637, 6700, 6759, 6912, 6918, 6947, 6956, 6972, 6996, 7006, 7009, 7012, 7019, 7033, 7106, 7134, 7137, 7180, 7203, 7233, 7265, 7318, 7363, 7376, 7451, 7463, 7475, 7590, 7642, 7686, 7690, 7751, 7758, 7766, 7804, 7831, 7836, 7887, 7892, 7930, 7937, 8039, 8045, 8061, 8076, 8080, 8153, 8170, 8179, 8213, 8216, 8288, 8346, 8349, 8467, 8488, 8511, 8517, 8528, 8548, 8557, 8562, 8566, 8574, 8575, 8624, 8630, 8642, 8666, 8674, 8679, 8717, 8758, 8779, 8804, 8808, 8825, 8997, 9056, 9131, 9157, 9207, 9266, 9345, 9381, 9393, 9508, 9552, 9580, 9696, 9712, 9744, 9749, 9774, 9804, 9805, 9819, 9836, 9880, 9920, 9921, 9935, 9981},
			result: []int{85, 103, 144, 150, 156, 178, 363, 390, 400, 439, 474, 482, 511, 529, 584, 622, 684, 756, 771, 772, 807, 879, 930, 933, 955, 990, 1012, 1021, 1026, 1092, 1113, 1117, 1153, 1182, 1199, 1234, 1242, 1298, 1323, 1474, 1605, 1655, 1690, 1694, 1697, 1715, 1728, 1785, 1841, 1860, 1890, 1929, 1930, 1945, 1973, 1976, 2001, 2018, 2055, 2112, 2165, 2176, 2217, 2240, 2287, 2348, 2366, 2372, 2381, 2464, 2576, 2596, 2602, 2690, 2704, 2716, 2798, 2831, 2839, 2883, 2887, 2913, 2936, 2976, 2985, 3031, 3059, 3076, 3121, 3168, 3185, 3267, 3370, 3387, 3409, 3434, 3441, 3443, 3449, 3470, 3512, 3541, 3544, 3635, 3652, 3659, 3667, 3671, 3716, 3722, 3749, 3758, 3878, 3880, 3884, 3912, 3957, 3958, 4043, 4101, 4135, 4172, 4305, 4391, 4418, 4454, 4473, 4477, 4502, 4557, 4563, 4569, 4596, 4599, 4696, 4698, 4702, 4741, 4758, 4796, 4827, 4847, 4907, 4926, 4984, 4997, 5099, 5122, 5151, 5172, 5174, 5189, 5265, 5276, 5303, 5380, 5381, 5397, 5407, 5418, 5437, 5463, 5474, 5480, 5529, 5575, 5576, 5583, 5587, 5615, 5644, 5664, 5668, 5934, 5976, 6032, 6048, 6055, 6056, 6071, 6082, 6089, 6109, 6167, 6172, 6255, 6262, 6287, 6307, 6320, 6351, 6364, 6401, 6414, 6527, 6544, 6560, 6637, 6700, 6759, 6912, 6918, 6947, 6956, 6972, 6996, 7006, 7009, 7012, 7019, 7033, 7106, 7134, 7137, 7180, 7203, 7233, 7265, 7318, 7363, 7376, 7451, 7463, 7475, 7590, 7642, 7686, 7690, 7751, 7758, 7766, 7804, 7831, 7836, 7887, 7892, 7930, 7937, 8039, 8045, 8061, 8076, 8080, 8153, 8170, 8179, 8213, 8216, 8288, 8346, 8349, 8467, 8488, 8511, 8517, 8528, 8548, 8557, 8562, 8566, 8574, 8575, 8624, 8630, 8642, 8666, 8674, 8679, 8717, 8758, 8779, 8804, 8808, 8825, 8997, 9056, 9131, 9157, 9207, 9266, 9345, 9381, 9393, 9508, 9552, 9580, 9696, 9712, 9744, 9749, 9774, 9804, 9805, 9819, 9836, 9880, 9920, 9921, 9935, 9981},
		},
		{
			result: []int{1, 2, 3, 4, 5, 6},
			input:  []int{6, 5, 4, 3, 2, 1},
		},

	}
	for _, tt := range heapTests {
		result:= heapsort(tt.input)
		if reflect.DeepEqual( result , tt.result) != true {
			t.Errorf("Expected \n%v\tGot \n%v\n",tt.result,result)
		}
	}

}
// func TestpqInsert(t *testing.T){
// pqInsert
// }
// func TestpqExtractMin(t *testing.T){
// pqExtractMin
// }
// func TestbubbleUp(t *testing.T){
// bubbleUp
// }
// func TestbubbleDown(t *testing.T){
// bubbleDown
// }
func TestPqParent(t *testing.T){
	heapTests := []struct {
		input  []int
		idx 	int
		result  int
	}{

		{
			input:  []int{61, 4, 7, 10, 12, 16, 17, 60, 55},
			idx : 2,
			result : 0,
		},

		{
			input:  []int{61, 4, 7, 10, 12, 16, 17, 20, 21, 22, 30, 31, 39, 40, 51, 54, 55, 57, 60, 3},
			idx : 0,
			result: -1,
		},
		{
			input:  []int{85, 103, 144, 150, 178, 156, 363, 390, 400, 439, 474, 482, 511, 529, 584, 622, 684, 772, 756, 771},
			idx : 18,
			result: 8,
		},

	}
	for _, tt := range heapTests {
		result:= pqParent(tt.input,tt.idx)
		if result != tt.result {
			t.Errorf("Expected %d\tGot %v\n",tt.result,result)
		}
	}
}
func TestPqLeftChild (t *testing.T){
	heapTests := []struct {
		input  []int
		idx 	int
		result  int
	}{

		{
			input:  []int{61, 4, 7, 10, 12, 16, 17, 60, 55},
			idx : 2,
			result : 5,
		},

		{
			input:  []int{61, 4, 7, 10, 12, 16, 17, 20, 21, 22, 30, 31, 39, 40, 51, 54, 55, 57, 60, 3},
			idx : 0,
			result: 1,
		},
		{
			input:  []int{85, 103, 144, 150, 178, 156, 363, 390, 400, 439, 474, 482, 511, 529, 584, 622, 684, 772, 756, 771},
			idx : 18,
			result: 37,
		},
	}
	for _, tt := range heapTests {
		result:= pqLeftChild(tt.idx)
		if result != tt.result {
			t.Errorf("Expected %d\tGot %v\n",tt.result,result)
		}
	}
}
