package main

import (
	"reflect"
	"sort"
	"testing"
)

type int32arr []int32

func (s int32arr) Len() int {
	return len(s)
}
func (s int32arr) Swap(i, j int) {
	s[i], s[j] = s[j], s[i]
}
func (s int32arr) Less(i, j int) bool {
	return s[i] < s[j]
}

// func TestDutchFlag(t *testing.T) {
// 	/*
// 			RRRGGGGBBBB
// 		RGGGRBBB
// 		BBBBBGGGGGRRRR
// 		BRGBRGBRG
// 		echo "RRRGGGGBBBB" | sed 's/\(.\)/"\1", /g' | pbcopy
// 	*/
// 	dutchTests := []struct {
// 		input  []byte
// 		result []byte
// 	}{
// 		// {
// 		// 	input:  []byte{'R', 'R', 'R', 'G', 'G', 'G', 'G', 'B', 'B', 'B', 'B'},
// 		// 	result: []byte{'R', 'R', 'R', 'G', 'G', 'G', 'G', 'B', 'B', 'B', 'B'},
// 		// },
// 		{
// 			input:  []byte{'B', 'B', 'R', 'B', 'B', 'B', 'G', 'R', 'G', 'G', 'G', 'G', 'R', 'R', 'R', 'R'},
// 			result: []byte{'R', 'R', 'R', 'R', 'R', 'R', 'G', 'G', 'G', 'G', 'G', 'B', 'B', 'B', 'B', 'B'},
// 		},
// 	}
// 	for _, tt := range dutchTests {
// 		result := dutchNationalFlag(tt.input)
// 		if reflect.DeepEqual(result, tt.result) == false {
// 			t.Errorf("\nResult not matching . \nNeed %v\n\nGot %v\n", tt.result, result)
// 		}

// 	}

// }
// func TestMergeTwoArrays(t *testing.T) {
// 	mergeTests := []struct {
// 		input1, input2 []int32
// 		result         []int32
// 	}{

// 		{
// 			input1: []int32{4, 7, 10, 12, 16, 17, 55, 60, 61},
// 			input2: []int32{22, 30, 31, 39, 40, 51, 54, 55, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0},
// 			result: []int32{22, 30, 31, 39, 40, 51, 54, 55, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0},
// 		},
// 	}
// 	for _, tt := range mergeTests {
// 		copy(tt.input2[len(tt.input1):], tt.input1)
// 		tt.result = merge_sort(tt.input2)
// 		merger_first_into_second(tt.input1, tt.input2)
// 		if reflect.DeepEqual(tt.input2, tt.result) == false {
// 			t.Errorf("\nResult not matching . \nNeed %v\n\nGot %v\n", tt.result, tt.input2)
// 		}
// 	}

// }

func TestMergesort(t *testing.T) {
	mergeTests := []struct {
		input  []int
		result []int
	}{

		{
			input:  []int{61, 4, 7, 10, 12, 16, 17, 60, 55},
			result: []int{4, 7, 10, 12, 16, 17, 55, 60, 61},
		},

		{
			input:  []int{61, 4, 7, 10, 12, 16, 17, 20, 21, 22, 30, 31, 39, 40, 51, 54, 55, 57, 60, 3},
			result: []int{3, 4, 7, 10, 12, 16, 17, 20, 21, 22, 30, 31, 39, 40, 51, 54, 55, 57, 60, 61},
		},
		{
			input:  []int{85, 103, 144, 150, 178, 156, 363, 390, 400, 439, 474, 482, 511, 529, 584, 622, 684, 772, 756, 771},
			result: []int{85, 103, 144, 150, 156, 178, 363, 390, 400, 439, 474, 482, 511, 529, 584, 622, 684, 756, 771, 772},
		},

		{
			input:  []int{85, 103, 144, 150, 178, 156, 363, 390, 400, 439, 474, 482, 511, 529, 584, 622, 684, 772, 756, 771, 807, 879, 930, 933, 955, 990, 1012, 1021, 1026, 1092, 1113, 1117, 1153, 1182, 1199, 1234, 1242, 1298, 1323, 1474, 1605, 1655, 1690, 1694, 1697, 1715, 1728, 1785, 1841, 1860, 1890, 1929, 1930, 1945, 1973, 1976, 2001, 2018, 2055, 2112, 2165, 2176, 2217, 2240, 2287, 2348, 2366, 2372, 2381, 2464, 2576, 2596, 2602, 2690, 2704, 2716, 2798, 2831, 2839, 2883, 2887, 2913, 2936, 2976, 2985, 3031, 3059, 3076, 3121, 3168, 3185, 3267, 3370, 3387, 3409, 3434, 3441, 3443, 3449, 3470, 3512, 3541, 3544, 3635, 3652, 3659, 3667, 3671, 3716, 3722, 3749, 3758, 3878, 3880, 3884, 3912, 3957, 3958, 4043, 4101, 4135, 4172, 4305, 4391, 4418, 4454, 4473, 4477, 4502, 4557, 4563, 4569, 4596, 4599, 4696, 4698, 4702, 4741, 4758, 4796, 4827, 4847, 4907, 4926, 4984, 4997, 5099, 5122, 5151, 5172, 5174, 5189, 5265, 5276, 5303, 5380, 5381, 5397, 5407, 5418, 5437, 5463, 5474, 5480, 5529, 5575, 5576, 5583, 5587, 5615, 5644, 5664, 5668, 5934, 5976, 6032, 6048, 6055, 6056, 6071, 6082, 6089, 6109, 6167, 6172, 6255, 6262, 6287, 6307, 6320, 6351, 6364, 6401, 6414, 6527, 6544, 6560, 6637, 6700, 6759, 6912, 6918, 6947, 6956, 6972, 6996, 7006, 7009, 7012, 7019, 7033, 7106, 7134, 7137, 7180, 7203, 7233, 7265, 7318, 7363, 7376, 7451, 7463, 7475, 7590, 7642, 7686, 7690, 7751, 7758, 7766, 7804, 7831, 7836, 7887, 7892, 7930, 7937, 8039, 8045, 8061, 8076, 8080, 8153, 8170, 8179, 8213, 8216, 8288, 8346, 8349, 8467, 8488, 8511, 8517, 8528, 8548, 8557, 8562, 8566, 8574, 8575, 8624, 8630, 8642, 8666, 8674, 8679, 8717, 8758, 8779, 8804, 8808, 8825, 8997, 9056, 9131, 9157, 9207, 9266, 9345, 9381, 9393, 9508, 9552, 9580, 9696, 9712, 9744, 9749, 9774, 9804, 9805, 9819, 9836, 9880, 9920, 9921, 9935, 9981},
			result: []int{85, 103, 144, 150, 156, 178, 363, 390, 400, 439, 474, 482, 511, 529, 584, 622, 684, 756, 771, 772, 807, 879, 930, 933, 955, 990, 1012, 1021, 1026, 1092, 1113, 1117, 1153, 1182, 1199, 1234, 1242, 1298, 1323, 1474, 1605, 1655, 1690, 1694, 1697, 1715, 1728, 1785, 1841, 1860, 1890, 1929, 1930, 1945, 1973, 1976, 2001, 2018, 2055, 2112, 2165, 2176, 2217, 2240, 2287, 2348, 2366, 2372, 2381, 2464, 2576, 2596, 2602, 2690, 2704, 2716, 2798, 2831, 2839, 2883, 2887, 2913, 2936, 2976, 2985, 3031, 3059, 3076, 3121, 3168, 3185, 3267, 3370, 3387, 3409, 3434, 3441, 3443, 3449, 3470, 3512, 3541, 3544, 3635, 3652, 3659, 3667, 3671, 3716, 3722, 3749, 3758, 3878, 3880, 3884, 3912, 3957, 3958, 4043, 4101, 4135, 4172, 4305, 4391, 4418, 4454, 4473, 4477, 4502, 4557, 4563, 4569, 4596, 4599, 4696, 4698, 4702, 4741, 4758, 4796, 4827, 4847, 4907, 4926, 4984, 4997, 5099, 5122, 5151, 5172, 5174, 5189, 5265, 5276, 5303, 5380, 5381, 5397, 5407, 5418, 5437, 5463, 5474, 5480, 5529, 5575, 5576, 5583, 5587, 5615, 5644, 5664, 5668, 5934, 5976, 6032, 6048, 6055, 6056, 6071, 6082, 6089, 6109, 6167, 6172, 6255, 6262, 6287, 6307, 6320, 6351, 6364, 6401, 6414, 6527, 6544, 6560, 6637, 6700, 6759, 6912, 6918, 6947, 6956, 6972, 6996, 7006, 7009, 7012, 7019, 7033, 7106, 7134, 7137, 7180, 7203, 7233, 7265, 7318, 7363, 7376, 7451, 7463, 7475, 7590, 7642, 7686, 7690, 7751, 7758, 7766, 7804, 7831, 7836, 7887, 7892, 7930, 7937, 8039, 8045, 8061, 8076, 8080, 8153, 8170, 8179, 8213, 8216, 8288, 8346, 8349, 8467, 8488, 8511, 8517, 8528, 8548, 8557, 8562, 8566, 8574, 8575, 8624, 8630, 8642, 8666, 8674, 8679, 8717, 8758, 8779, 8804, 8808, 8825, 8997, 9056, 9131, 9157, 9207, 9266, 9345, 9381, 9393, 9508, 9552, 9580, 9696, 9712, 9744, 9749, 9774, 9804, 9805, 9819, 9836, 9880, 9920, 9921, 9935, 9981},
		},
		{
			result: []int{1, 2, 3, 4, 5, 6},
			input:  []int{6, 5, 4, 3, 2, 1},
		},
	}
	for _, tt := range mergeTests {

		result := merge_sort(tt.input)
		if reflect.DeepEqual(result, tt.result) == false {
			t.Errorf("\nResult not matching . \nNeed %v\n\nGot %v\n", tt.result, result)
		}
	}
}

func TestInsertionSort(t *testing.T) {

	insertTests := []struct {
		input1 []int
		result []int
	}{
		{input1: []int{6, 3, 2, 5, 4, 1}, result: []int{1, 2, 3, 4, 5, 6}},
	}
	for _, tt := range insertTests {
		result := insertionSort(tt.input1)
		if reflect.DeepEqual(result, tt.result) {
			t.Errorf("Result not matching . Need %v . Got %v", tt.result, result)
		}
	}

}


func TestQuicksort(t *testing.T) {

	insertTests := []struct {
		input1 []int
		result []int
	}{
		{input1: []int{6, 3, 2, 5, 4, 1}, result: []int{1, 2, 3, 4, 5, 6}},
		{input1: []int{1, 3, 5, 6, 4}, result: []int{1, 3, 4, 5, 6}},
	}
	for _, tt := range insertTests {
		result := quicksort(tt.input1)
		if !reflect.DeepEqual(result, tt.result) {
			t.Errorf("Result not matching . Need %v . Got %v", tt.result, result)
		}
	}

}

func BenchmarkQuicksort(b *testing.B) {
	mergeTests := []struct {
		input1 []int
		result []int
	}{
		{input1: []int{3, 8, 11, 15, 17, 21, 22, 23, 31, 39, 40, 41, 42, 48, 53, 55, 59, 60, 64, 69, 75, 78, 80, 81, 86, 89, 92, 94, 96, 98, 100, 101, 108, 113, 114, 121, 123, 129, 130, 134, 136, 146, 147, 151, 157, 161, 163, 173, 176, 180, 181, 186, 187, 188, 190, 191, 195, 196, 199, 200, 208, 210, 213, 219, 220, 225, 227, 243, 245, 246, 247, 252, 253, 254, 256, 259, 267, 272, 283, 288, 289, 293, 295, 307, 308, 309, 321, 330, 334, 335, 345, 347, 350, 351, 355, 356, 359, 362, 363, 373, 375, 381, 388, 390, 393, 402, 410, 417, 419, 420, 427, 428, 438, 439, 443, 450, 451, 454, 456, 458, 462, 463, 467, 472, 476, 482, 485, 487, 489, 491, 497, 507, 508, 511, 512, 526, 527, 533, 537, 540, 542, 546, 554, 557, 559, 560, 563, 565, 566, 569, 571, 586, 587, 592, 599, 609, 612, 613, 618, 619, 627, 633, 637, 649, 650, 651, 656, 661, 675, 677, 680, 681, 686, 695, 696, 697, 705, 708, 711, 718, 720, 723, 724, 725, 730, 732, 734, 742, 743, 750, 753, 757, 758, 760, 761, 763, 765, 769, 771, 775, 780, 785, 790, 796, 798, 816, 818, 819, 821, 829, 833, 835, 840, 842, 851, 852, 853, 861, 862, 863, 864, 866, 874, 879, 881, 891, 895, 899, 918, 921, 927, 932, 936, 937, 939, 940, 943, 945, 949, 954, 960, 968, 970, 971, 978, 980, 996, 998, 1001, 1003, 1006, 1009, 1011, 1013, 1016, 1020, 1025, 1028, 1029, 1039, 1044, 1045, 1050, 1059, 1060, 1067, 1073, 1079, 1085, 1097, 1105, 1116, 1125, 1129, 1133, 1140, 1141, 1142, 1145, 1146, 1149, 1150, 1157, 1162, 1171, 1175, 1176, 1180, 1182, 1188, 1196, 1198, 1206, 1208, 1214, 1217, 1218, 1219, 1227, 1231, 1236, 1239, 1246, 1251, 1254, 1255, 1256, 1257, 1265, 1268, 1269, 1275, 1279, 1281, 1288, 1290, 1292, 1293, 1294, 1296, 1299, 1309, 1315, 1322, 1325, 1329, 1330, 1332, 1334, 1335, 1340, 1341, 1342, 1346, 1355, 1360, 1361, 1363, 1379, 1381, 1382, 1383, 1391, 1398, 1399, 1400, 1402, 1403, 1405, 1406, 1407, 1413, 1414, 1415, 1422, 1426, 1432, 1438, 1441, 1442, 1446, 1447, 1454, 1457, 1460, 1462, 1463, 1465, 1479, 1480, 1485, 1489, 1490, 1493, 1497, 1502, 1503, 1504, 1513, 1516, 1518, 1519, 1522, 1524, 1538, 1540, 1541, 1555, 1557, 1559, 1563, 1564, 1573, 1575, 1578, 1579, 1581, 1586, 1587, 1588, 1590, 1591, 1599, 1606, 1609, 1612, 1613, 1616, 1629, 1630, 1636, 1640, 1649, 1660, 1663, 1664, 1667, 1674, 1679, 1684, 1685, 1686, 1691, 1697, 1698, 1699, 1700, 1708, 1709, 1716, 1718, 1719, 1723, 1725, 1726, 1731, 1733, 1735, 1736, 1743, 1746, 1747, 1748, 1751, 1753, 1759, 1766, 1769, 1770, 1779, 1783, 1787, 1791, 1796, 1806, 1821, 1824, 1825, 1826, 1828, 1829, 1839, 1840, 1842, 1843, 1853, 1854, 1863, 1864, 1868, 1876, 1884, 1888, 1889, 1890, 1899, 1903, 1908, 1915, 1921, 1924, 1927, 1928, 1929, 1931, 1941, 1942, 1949, 1952, 1954, 1956, 1958, 1965, 1968, 1975, 1992, 1994, 1997, 1999, 2000}, result: []int{}},
		{input1: []int{6, 3, 2, 4, 5, 1}, result: []int{1, 2, 3, 4, 5, 6}},
		{input1: []int{3, 4, 7, 10, 12, 16, 17, 20, 21, 22, 30, 31, 39, 40, 51, 54, 55, 57, 60, 61, 62, 63, 76, 77, 78, 88, 90, 105, 108, 110, 116, 119, 126, 128, 130, 131, 132, 133, 134, 136, 146, 151, 163, 166, 170, 172, 180, 184, 191, 198, 199, 204, 209, 217, 218, 221, 231, 232, 234, 237, 257, 258, 259, 262, 265, 272, 273, 277, 278, 286, 289, 291, 292, 293, 297, 303, 305, 309, 312, 317, 318, 322, 325, 326, 328, 329, 333, 340, 346, 353, 356, 359, 360, 368, 373, 378, 382, 383, 390, 394, 397, 401, 403, 413, 416, 418, 423, 425, 429, 432, 434, 435, 437, 438, 447, 451, 457, 458, 462, 463, 468, 474, 475, 480, 484, 493, 494, 508, 510, 526, 527, 529, 540, 547, 548, 552, 557, 561, 563, 567, 570, 571, 574, 576, 586, 588, 592, 596, 597, 602, 603, 604, 624, 625, 629, 632, 635, 639, 641, 643, 644, 647, 655, 656, 657, 661, 672, 673, 677, 679, 682, 684, 686, 696, 699, 703, 711, 712, 716, 718, 719, 720, 726, 728, 730, 738, 750, 751, 753, 754, 755, 765, 766, 768, 771, 780, 785, 788, 797, 798, 804, 809, 811, 814, 820, 825, 826, 827, 828, 829, 831, 832, 841, 843, 845, 846, 850, 860, 865, 867, 873, 879, 887, 892, 898, 906, 908, 909, 911, 917, 918, 920, 930, 937, 939, 950, 953, 958, 959, 966, 967, 972, 978, 981, 983, 987, 988, 996, 997, 1012, 1016, 1018, 1021, 1026, 1027, 1028, 1029, 1030, 1033, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1048, 1051, 1052, 1054, 1060, 1061, 1062, 1064, 1068, 1069, 1073, 1076, 1081, 1082, 1083, 1086, 1088, 1090, 1091, 1098, 1100, 1101, 1102, 1103, 1112, 1115, 1117, 1122, 1123, 1125, 1129, 1134, 1139, 1152, 1155, 1159, 1162, 1166, 1170, 1174, 1175, 1183, 1188, 1190, 1197, 1203, 1215, 1217, 1221, 1228, 1230, 1233, 1240, 1247, 1249, 1251, 1260, 1261, 1265, 1269, 1273, 1275, 1276, 1281, 1282, 1283, 1289, 1290, 1314, 1315, 1322, 1328, 1333, 1336, 1337, 1340, 1347, 1351, 1364, 1369, 1370, 1371, 1377, 1387, 1388, 1396, 1398, 1399, 1400, 1401, 1406, 1415, 1417, 1420, 1421, 1427, 1433, 1434, 1435, 1437, 1458, 1459, 1463, 1468, 1475, 1478, 1480, 1481, 1488, 1494, 1496, 1501, 1502, 1512, 1517, 1518, 1520, 1521, 1525, 1528, 1534, 1543, 1546, 1547, 1551, 1555, 1557, 1562, 1565, 1573, 1581, 1589, 1593, 1595, 1598, 1599, 1606, 1607, 1620, 1622, 1627, 1628, 1637, 1638, 1640, 1641, 1646, 1660, 1661, 1665, 1675, 1679, 1691, 1697, 1703, 1708, 1712, 1714, 1715, 1721, 1726, 1731, 1737, 1747, 1750, 1753, 1760, 1762, 1764, 1769, 1772, 1777, 1779, 1780, 1799, 1800, 1803, 1805, 1811, 1815, 1821, 1828, 1830, 1833, 1841, 1842, 1843, 1844, 1845, 1849, 1851, 1852, 1854, 1856, 1862, 1865, 1868, 1870, 1874, 1879, 1880, 1890, 1896, 1900, 1901, 1902, 1905, 1906, 1916, 1919, 1941, 1942, 1943, 1945, 1946, 1948, 1949, 1950, 1952, 1955, 1958, 1966, 1968, 1974, 1978, 1979, 1981, 1983, 1986, 1992, 1993, 1999}, result: []int{}},
	}

	for i := 0; i < b.N; i++ {
		mergeTests[0].result = make ([]int,len(mergeTests[0].input1))
		copy(mergeTests[0].result, mergeTests[0].input1)
		sort.Ints(mergeTests[0].result)
		result := quicksort(mergeTests[0].input1)
		if !reflect.DeepEqual(result, mergeTests[0].result) {
			b.Errorf("Result not matching . Need %v . Got %v", mergeTests[0].result, result)
		}
	}
}



//go test -cpuprofile cpu.prof -memprofile mem.prof -bench .
//go tool pprof cpu.prof
func BenchmarkInsertionsort(b *testing.B) {
	mergeTests := []struct {
		input1 []int
		result []int
	}{
		{input1: []int{3, 8, 11, 15, 17, 21, 22, 23, 31, 39, 40, 41, 42, 48, 53, 55, 59, 60, 64, 69, 75, 78, 80, 81, 86, 89, 92, 94, 96, 98, 100, 101, 108, 113, 114, 121, 123, 129, 130, 134, 136, 146, 147, 151, 157, 161, 163, 173, 176, 180, 181, 186, 187, 188, 190, 191, 195, 196, 199, 200, 208, 210, 213, 219, 220, 225, 227, 243, 245, 246, 247, 252, 253, 254, 256, 259, 267, 272, 283, 288, 289, 293, 295, 307, 308, 309, 321, 330, 334, 335, 345, 347, 350, 351, 355, 356, 359, 362, 363, 373, 375, 381, 388, 390, 393, 402, 410, 417, 419, 420, 427, 428, 438, 439, 443, 450, 451, 454, 456, 458, 462, 463, 467, 472, 476, 482, 485, 487, 489, 491, 497, 507, 508, 511, 512, 526, 527, 533, 537, 540, 542, 546, 554, 557, 559, 560, 563, 565, 566, 569, 571, 586, 587, 592, 599, 609, 612, 613, 618, 619, 627, 633, 637, 649, 650, 651, 656, 661, 675, 677, 680, 681, 686, 695, 696, 697, 705, 708, 711, 718, 720, 723, 724, 725, 730, 732, 734, 742, 743, 750, 753, 757, 758, 760, 761, 763, 765, 769, 771, 775, 780, 785, 790, 796, 798, 816, 818, 819, 821, 829, 833, 835, 840, 842, 851, 852, 853, 861, 862, 863, 864, 866, 874, 879, 881, 891, 895, 899, 918, 921, 927, 932, 936, 937, 939, 940, 943, 945, 949, 954, 960, 968, 970, 971, 978, 980, 996, 998, 1001, 1003, 1006, 1009, 1011, 1013, 1016, 1020, 1025, 1028, 1029, 1039, 1044, 1045, 1050, 1059, 1060, 1067, 1073, 1079, 1085, 1097, 1105, 1116, 1125, 1129, 1133, 1140, 1141, 1142, 1145, 1146, 1149, 1150, 1157, 1162, 1171, 1175, 1176, 1180, 1182, 1188, 1196, 1198, 1206, 1208, 1214, 1217, 1218, 1219, 1227, 1231, 1236, 1239, 1246, 1251, 1254, 1255, 1256, 1257, 1265, 1268, 1269, 1275, 1279, 1281, 1288, 1290, 1292, 1293, 1294, 1296, 1299, 1309, 1315, 1322, 1325, 1329, 1330, 1332, 1334, 1335, 1340, 1341, 1342, 1346, 1355, 1360, 1361, 1363, 1379, 1381, 1382, 1383, 1391, 1398, 1399, 1400, 1402, 1403, 1405, 1406, 1407, 1413, 1414, 1415, 1422, 1426, 1432, 1438, 1441, 1442, 1446, 1447, 1454, 1457, 1460, 1462, 1463, 1465, 1479, 1480, 1485, 1489, 1490, 1493, 1497, 1502, 1503, 1504, 1513, 1516, 1518, 1519, 1522, 1524, 1538, 1540, 1541, 1555, 1557, 1559, 1563, 1564, 1573, 1575, 1578, 1579, 1581, 1586, 1587, 1588, 1590, 1591, 1599, 1606, 1609, 1612, 1613, 1616, 1629, 1630, 1636, 1640, 1649, 1660, 1663, 1664, 1667, 1674, 1679, 1684, 1685, 1686, 1691, 1697, 1698, 1699, 1700, 1708, 1709, 1716, 1718, 1719, 1723, 1725, 1726, 1731, 1733, 1735, 1736, 1743, 1746, 1747, 1748, 1751, 1753, 1759, 1766, 1769, 1770, 1779, 1783, 1787, 1791, 1796, 1806, 1821, 1824, 1825, 1826, 1828, 1829, 1839, 1840, 1842, 1843, 1853, 1854, 1863, 1864, 1868, 1876, 1884, 1888, 1889, 1890, 1899, 1903, 1908, 1915, 1921, 1924, 1927, 1928, 1929, 1931, 1941, 1942, 1949, 1952, 1954, 1956, 1958, 1965, 1968, 1975, 1992, 1994, 1997, 1999, 2000}, result: []int{}},
		{input1: []int{6, 3, 2, 4, 5, 1}, result: []int{1, 2, 3, 4, 5, 6}},
		{input1: []int{3, 4, 7, 10, 12, 16, 17, 20, 21, 22, 30, 31, 39, 40, 51, 54, 55, 57, 60, 61, 62, 63, 76, 77, 78, 88, 90, 105, 108, 110, 116, 119, 126, 128, 130, 131, 132, 133, 134, 136, 146, 151, 163, 166, 170, 172, 180, 184, 191, 198, 199, 204, 209, 217, 218, 221, 231, 232, 234, 237, 257, 258, 259, 262, 265, 272, 273, 277, 278, 286, 289, 291, 292, 293, 297, 303, 305, 309, 312, 317, 318, 322, 325, 326, 328, 329, 333, 340, 346, 353, 356, 359, 360, 368, 373, 378, 382, 383, 390, 394, 397, 401, 403, 413, 416, 418, 423, 425, 429, 432, 434, 435, 437, 438, 447, 451, 457, 458, 462, 463, 468, 474, 475, 480, 484, 493, 494, 508, 510, 526, 527, 529, 540, 547, 548, 552, 557, 561, 563, 567, 570, 571, 574, 576, 586, 588, 592, 596, 597, 602, 603, 604, 624, 625, 629, 632, 635, 639, 641, 643, 644, 647, 655, 656, 657, 661, 672, 673, 677, 679, 682, 684, 686, 696, 699, 703, 711, 712, 716, 718, 719, 720, 726, 728, 730, 738, 750, 751, 753, 754, 755, 765, 766, 768, 771, 780, 785, 788, 797, 798, 804, 809, 811, 814, 820, 825, 826, 827, 828, 829, 831, 832, 841, 843, 845, 846, 850, 860, 865, 867, 873, 879, 887, 892, 898, 906, 908, 909, 911, 917, 918, 920, 930, 937, 939, 950, 953, 958, 959, 966, 967, 972, 978, 981, 983, 987, 988, 996, 997, 1012, 1016, 1018, 1021, 1026, 1027, 1028, 1029, 1030, 1033, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1048, 1051, 1052, 1054, 1060, 1061, 1062, 1064, 1068, 1069, 1073, 1076, 1081, 1082, 1083, 1086, 1088, 1090, 1091, 1098, 1100, 1101, 1102, 1103, 1112, 1115, 1117, 1122, 1123, 1125, 1129, 1134, 1139, 1152, 1155, 1159, 1162, 1166, 1170, 1174, 1175, 1183, 1188, 1190, 1197, 1203, 1215, 1217, 1221, 1228, 1230, 1233, 1240, 1247, 1249, 1251, 1260, 1261, 1265, 1269, 1273, 1275, 1276, 1281, 1282, 1283, 1289, 1290, 1314, 1315, 1322, 1328, 1333, 1336, 1337, 1340, 1347, 1351, 1364, 1369, 1370, 1371, 1377, 1387, 1388, 1396, 1398, 1399, 1400, 1401, 1406, 1415, 1417, 1420, 1421, 1427, 1433, 1434, 1435, 1437, 1458, 1459, 1463, 1468, 1475, 1478, 1480, 1481, 1488, 1494, 1496, 1501, 1502, 1512, 1517, 1518, 1520, 1521, 1525, 1528, 1534, 1543, 1546, 1547, 1551, 1555, 1557, 1562, 1565, 1573, 1581, 1589, 1593, 1595, 1598, 1599, 1606, 1607, 1620, 1622, 1627, 1628, 1637, 1638, 1640, 1641, 1646, 1660, 1661, 1665, 1675, 1679, 1691, 1697, 1703, 1708, 1712, 1714, 1715, 1721, 1726, 1731, 1737, 1747, 1750, 1753, 1760, 1762, 1764, 1769, 1772, 1777, 1779, 1780, 1799, 1800, 1803, 1805, 1811, 1815, 1821, 1828, 1830, 1833, 1841, 1842, 1843, 1844, 1845, 1849, 1851, 1852, 1854, 1856, 1862, 1865, 1868, 1870, 1874, 1879, 1880, 1890, 1896, 1900, 1901, 1902, 1905, 1906, 1916, 1919, 1941, 1942, 1943, 1945, 1946, 1948, 1949, 1950, 1952, 1955, 1958, 1966, 1968, 1974, 1978, 1979, 1981, 1983, 1986, 1992, 1993, 1999}, result: []int{}},
	}
	for i:=0;i<len(mergeTests);i++{
		mergeTests[0].result = make ([]int,len(mergeTests[0].input1))
		copy(mergeTests[0].result, mergeTests[0].input1)
		sort.Ints(mergeTests[0].result)

	}
	for i := 0; i < b.N; i++ {
		result := insertionSort(mergeTests[0].input1)
		if reflect.DeepEqual(result, mergeTests[0].result) == false {
			b.Errorf("Result not matching . Need %v . Got %v", mergeTests[0].result, result)
		}
	}
}

//go test -cpuprofile cpu.prof -memprofile mem.prof -bench .
//go tool pprof cpu.prof
func BenchmarkMergesort(b *testing.B) {

	mergeTests := []struct {
		input  []int
		result []int
	}{
		{input: []int{3, 4, 7, 10, 12, 16, 17, 20, 21, 22, 30, 31, 39, 40, 51, 54, 55, 57, 60, 61, 62, 63, 76, 77, 78, 88, 90, 105, 108, 110, 116, 119, 126, 128, 130, 131, 132, 133, 134, 136, 146, 151, 163, 166, 170, 172, 180, 184, 191, 198, 199, 204, 209, 217, 218, 221, 231, 232, 234, 237, 257, 258, 259, 262, 265, 272, 273, 277, 278, 286, 289, 291, 292, 293, 297, 303, 305, 309, 312, 317, 318, 322, 325, 326, 328, 329, 333, 340, 346, 353, 356, 359, 360, 368, 373, 378, 382, 383, 390, 394, 397, 401, 403, 413, 416, 418, 423, 425, 429, 432, 434, 435, 437, 438, 447, 451, 457, 458, 462, 463, 468, 474, 475, 480, 484, 493, 494, 508, 510, 526, 527, 529, 540, 547, 548, 552, 557, 561, 563, 567, 570, 571, 574, 576, 586, 588, 592, 596, 597, 602, 603, 604, 624, 625, 629, 632, 635, 639, 641, 643, 644, 647, 655, 656, 657, 661, 672, 673, 677, 679, 682, 684, 686, 696, 699, 703, 711, 712, 716, 718, 719, 720, 726, 728, 730, 738, 750, 751, 753, 754, 755, 765, 766, 768, 771, 780, 785, 788, 797, 798, 804, 809, 811, 814, 820, 825, 826, 827, 828, 829, 831, 832, 841, 843, 845, 846, 850, 860, 865, 867, 873, 879, 887, 892, 898, 906, 908, 909, 911, 917, 918, 920, 930, 937, 939, 950, 953, 958, 959, 966, 967, 972, 978, 981, 983, 987, 988, 996, 997, 1012, 1016, 1018, 1021, 1026, 1027, 1028, 1029, 1030, 1033, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1048, 1051, 1052, 1054, 1060, 1061, 1062, 1064, 1068, 1069, 1073, 1076, 1081, 1082, 1083, 1086, 1088, 1090, 1091, 1098, 1100, 1101, 1102, 1103, 1112, 1115, 1117, 1122, 1123, 1125, 1129, 1134, 1139, 1152, 1155, 1159, 1162, 1166, 1170, 1174, 1175, 1183, 1188, 1190, 1197, 1203, 1215, 1217, 1221, 1228, 1230, 1233, 1240, 1247, 1249, 1251, 1260, 1261, 1265, 1269, 1273, 1275, 1276, 1281, 1282, 1283, 1289, 1290, 1314, 1315, 1322, 1328, 1333, 1336, 1337, 1340, 1347, 1351, 1364, 1369, 1370, 1371, 1377, 1387, 1388, 1396, 1398, 1399, 1400, 1401, 1406, 1415, 1417, 1420, 1421, 1427, 1433, 1434, 1435, 1437, 1458, 1459, 1463, 1468, 1475, 1478, 1480, 1481, 1488, 1494, 1496, 1501, 1502, 1512, 1517, 1518, 1520, 1521, 1525, 1528, 1534, 1543, 1546, 1547, 1551, 1555, 1557, 1562, 1565, 1573, 1581, 1589, 1593, 1595, 1598, 1599, 1606, 1607, 1620, 1622, 1627, 1628, 1637, 1638, 1640, 1641, 1646, 1660, 1661, 1665, 1675, 1679, 1691, 1697, 1703, 1708, 1712, 1714, 1715, 1721, 1726, 1731, 1737, 1747, 1750, 1753, 1760, 1762, 1764, 1769, 1772, 1777, 1779, 1780, 1799, 1800, 1803, 1805, 1811, 1815, 1821, 1828, 1830, 1833, 1841, 1842, 1843, 1844, 1845, 1849, 1851, 1852, 1854, 1856, 1862, 1865, 1868, 1870, 1874, 1879, 1880, 1890, 1896, 1900, 1901, 1902, 1905, 1906, 1916, 1919, 1941, 1942, 1943, 1945, 1946, 1948, 1949, 1950, 1952, 1955, 1958, 1966, 1968, 1974, 1978, 1979, 1981, 1983, 1986, 1992, 1993, 1999, 3, 8, 11, 15, 17, 21, 22, 23, 31, 39, 40, 41, 42, 48, 53, 55, 59, 60, 64, 69, 75, 78, 80, 81, 86, 89, 92, 94, 96, 98, 100, 101, 108, 113, 114, 121, 123, 129, 130, 134, 136, 146, 147, 151, 157, 161, 163, 173, 176, 180, 181, 186, 187, 188, 190, 191, 195, 196, 199, 200, 208, 210, 213, 219, 220, 225, 227, 243, 245, 246, 247, 252, 253, 254, 256, 259, 267, 272, 283, 288, 289, 293, 295, 307, 308, 309, 321, 330, 334, 335, 345, 347, 350, 351, 355, 356, 359, 362, 363, 373, 375, 381, 388, 390, 393, 402, 410, 417, 419, 420, 427, 428, 438, 439, 443, 450, 451, 454, 456, 458, 462, 463, 467, 472, 476, 482, 485, 487, 489, 491, 497, 507, 508, 511, 512, 526, 527, 533, 537, 540, 542, 546, 554, 557, 559, 560, 563, 565, 566, 569, 571, 586, 587, 592, 599, 609, 612, 613, 618, 619, 627, 633, 637, 649, 650, 651, 656, 661, 675, 677, 680, 681, 686, 695, 696, 697, 705, 708, 711, 718, 720, 723, 724, 725, 730, 732, 734, 742, 743, 750, 753, 757, 758, 760, 761, 763, 765, 769, 771, 775, 780, 785, 790, 796, 798, 816, 818, 819, 821, 829, 833, 835, 840, 842, 851, 852, 853, 861, 862, 863, 864, 866, 874, 879, 881, 891, 895, 899, 918, 921, 927, 932, 936, 937, 939, 940, 943, 945, 949, 954, 960, 968, 970, 971, 978, 980, 996, 998, 1001, 1003, 1006, 1009, 1011, 1013, 1016, 1020, 1025, 1028, 1029, 1039, 1044, 1045, 1050, 1059, 1060, 1067, 1073, 1079, 1085, 1097, 1105, 1116, 1125, 1129, 1133, 1140, 1141, 1142, 1145, 1146, 1149, 1150, 1157, 1162, 1171, 1175, 1176, 1180, 1182, 1188, 1196, 1198, 1206, 1208, 1214, 1217, 1218, 1219, 1227, 1231, 1236, 1239, 1246, 1251, 1254, 1255, 1256, 1257, 1265, 1268, 1269, 1275, 1279, 1281, 1288, 1290, 1292, 1293, 1294, 1296, 1299, 1309, 1315, 1322, 1325, 1329, 1330, 1332, 1334, 1335, 1340, 1341, 1342, 1346, 1355, 1360, 1361, 1363, 1379, 1381, 1382, 1383, 1391, 1398, 1399, 1400, 1402, 1403, 1405, 1406, 1407, 1413, 1414, 1415, 1422, 1426, 1432, 1438, 1441, 1442, 1446, 1447, 1454, 1457, 1460, 1462, 1463, 1465, 1479, 1480, 1485, 1489, 1490, 1493, 1497, 1502, 1503, 1504, 1513, 1516, 1518, 1519, 1522, 1524, 1538, 1540, 1541, 1555, 1557, 1559, 1563, 1564, 1573, 1575, 1578, 1579, 1581, 1586, 1587, 1588, 1590, 1591, 1599, 1606, 1609, 1612, 1613, 1616, 1629, 1630, 1636, 1640, 1649, 1660, 1663, 1664, 1667, 1674, 1679, 1684, 1685, 1686, 1691, 1697, 1698, 1699, 1700, 1708, 1709, 1716, 1718, 1719, 1723, 1725, 1726, 1731, 1733, 1735, 1736, 1743, 1746, 1747, 1748, 1751, 1753, 1759, 1766, 1769, 1770, 1779, 1783, 1787, 1791, 1796, 1806, 1821, 1824, 1825, 1826, 1828, 1829, 1839, 1840, 1842, 1843, 1853, 1854, 1863, 1864, 1868, 1876, 1884, 1888, 1889, 1890, 1899, 1903, 1908, 1915, 1921, 1924, 1927, 1928, 1929, 1931, 1941, 1942, 1949, 1952, 1954, 1956, 1958, 1965, 1968, 1975, 1992, 1994, 1997, 1999, 2000}, result: []int{}},
		{input: []int{1, 3, 2, 4, 5, 6}, result: []int{}},
	}

	for i := 0; i < b.N; i++ {
		mergeTests[i].result = make ([]int,len(mergeTests[i].input))
		copy(mergeTests[i].result, mergeTests[i].input)

		sort.Ints(mergeTests[i].result)

		result := merge_sort(mergeTests[i].input)
		if reflect.DeepEqual(result, mergeTests[i].result) == false {
			b.Errorf("Result not matching . Need %v . Got %v", mergeTests[i].result, result)
		}
	}
}
