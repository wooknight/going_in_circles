//

package main

import (
	// "fmt"
	"reflect"
	"testing"
)

func TestQuicksort(t *testing.T) {

	testvalues := []struct {
		input  []int
		result []int
	}{
		{
			input:  []int{61, 4, 7, 10, 12, 16, 17, 60, 55},
			result: []int{4, 7, 10, 12, 16, 17, 55, 60, 61},
		},

		{
			input:  []int{61, 4, 7, 10, 12, 16, 17, 20, 21, 22, 30, 31, 39, 40, 51, 54, 55, 57, 60, 3},
			result: []int{3, 4, 7, 10, 12, 16, 17, 20, 21, 22, 30, 31, 39, 40, 51, 54, 55, 57, 60, 61},
		},
		{
			input:  []int{85, 103, 144, 150, 178, 156, 363, 390, 400, 439, 474, 482, 511, 529, 584, 622, 684, 772, 756, 771},
			result: []int{85, 103, 144, 150, 156, 178, 363, 390, 400, 439, 474, 482, 511, 529, 584, 622, 684, 756, 771, 772},
		},

		{
			input:  []int{85, 103, 144, 150, 178, 156, 363, 390, 400, 439, 474, 482, 511, 529, 584, 622, 684, 772, 756, 771, 807, 879, 930, 933, 955, 990, 1012, 1021, 1026, 1092, 1113, 1117, 1153, 1182, 1199, 1234, 1242, 1298, 1323, 1474, 1605, 1655, 1690, 1694, 1697, 1715, 1728, 1785, 1841, 1860, 1890, 1929, 1930, 1945, 1973, 1976, 2001, 2018, 2055, 2112, 2165, 2176, 2217, 2240, 2287, 2348, 2366, 2372, 2381, 2464, 2576, 2596, 2602, 2690, 2704, 2716, 2798, 2831, 2839, 2883, 2887, 2913, 2936, 2976, 2985, 3031, 3059, 3076, 3121, 3168, 3185, 3267, 3370, 3387, 3409, 3434, 3441, 3443, 3449, 3470, 3512, 3541, 3544, 3635, 3652, 3659, 3667, 3671, 3716, 3722, 3749, 3758, 3878, 3880, 3884, 3912, 3957, 3958, 4043, 4101, 4135, 4172, 4305, 4391, 4418, 4454, 4473, 4477, 4502, 4557, 4563, 4569, 4596, 4599, 4696, 4698, 4702, 4741, 4758, 4796, 4827, 4847, 4907, 4926, 4984, 4997, 5099, 5122, 5151, 5172, 5174, 5189, 5265, 5276, 5303, 5380, 5381, 5397, 5407, 5418, 5437, 5463, 5474, 5480, 5529, 5575, 5576, 5583, 5587, 5615, 5644, 5664, 5668, 5934, 5976, 6032, 6048, 6055, 6056, 6071, 6082, 6089, 6109, 6167, 6172, 6255, 6262, 6287, 6307, 6320, 6351, 6364, 6401, 6414, 6527, 6544, 6560, 6637, 6700, 6759, 6912, 6918, 6947, 6956, 6972, 6996, 7006, 7009, 7012, 7019, 7033, 7106, 7134, 7137, 7180, 7203, 7233, 7265, 7318, 7363, 7376, 7451, 7463, 7475, 7590, 7642, 7686, 7690, 7751, 7758, 7766, 7804, 7831, 7836, 7887, 7892, 7930, 7937, 8039, 8045, 8061, 8076, 8080, 8153, 8170, 8179, 8213, 8216, 8288, 8346, 8349, 8467, 8488, 8511, 8517, 8528, 8548, 8557, 8562, 8566, 8574, 8575, 8624, 8630, 8642, 8666, 8674, 8679, 8717, 8758, 8779, 8804, 8808, 8825, 8997, 9056, 9131, 9157, 9207, 9266, 9345, 9381, 9393, 9508, 9552, 9580, 9696, 9712, 9744, 9749, 9774, 9804, 9805, 9819, 9836, 9880, 9920, 9921, 9935, 9981},
			result: []int{85, 103, 144, 150, 156, 178, 363, 390, 400, 439, 474, 482, 511, 529, 584, 622, 684, 756, 771, 772, 807, 879, 930, 933, 955, 990, 1012, 1021, 1026, 1092, 1113, 1117, 1153, 1182, 1199, 1234, 1242, 1298, 1323, 1474, 1605, 1655, 1690, 1694, 1697, 1715, 1728, 1785, 1841, 1860, 1890, 1929, 1930, 1945, 1973, 1976, 2001, 2018, 2055, 2112, 2165, 2176, 2217, 2240, 2287, 2348, 2366, 2372, 2381, 2464, 2576, 2596, 2602, 2690, 2704, 2716, 2798, 2831, 2839, 2883, 2887, 2913, 2936, 2976, 2985, 3031, 3059, 3076, 3121, 3168, 3185, 3267, 3370, 3387, 3409, 3434, 3441, 3443, 3449, 3470, 3512, 3541, 3544, 3635, 3652, 3659, 3667, 3671, 3716, 3722, 3749, 3758, 3878, 3880, 3884, 3912, 3957, 3958, 4043, 4101, 4135, 4172, 4305, 4391, 4418, 4454, 4473, 4477, 4502, 4557, 4563, 4569, 4596, 4599, 4696, 4698, 4702, 4741, 4758, 4796, 4827, 4847, 4907, 4926, 4984, 4997, 5099, 5122, 5151, 5172, 5174, 5189, 5265, 5276, 5303, 5380, 5381, 5397, 5407, 5418, 5437, 5463, 5474, 5480, 5529, 5575, 5576, 5583, 5587, 5615, 5644, 5664, 5668, 5934, 5976, 6032, 6048, 6055, 6056, 6071, 6082, 6089, 6109, 6167, 6172, 6255, 6262, 6287, 6307, 6320, 6351, 6364, 6401, 6414, 6527, 6544, 6560, 6637, 6700, 6759, 6912, 6918, 6947, 6956, 6972, 6996, 7006, 7009, 7012, 7019, 7033, 7106, 7134, 7137, 7180, 7203, 7233, 7265, 7318, 7363, 7376, 7451, 7463, 7475, 7590, 7642, 7686, 7690, 7751, 7758, 7766, 7804, 7831, 7836, 7887, 7892, 7930, 7937, 8039, 8045, 8061, 8076, 8080, 8153, 8170, 8179, 8213, 8216, 8288, 8346, 8349, 8467, 8488, 8511, 8517, 8528, 8548, 8557, 8562, 8566, 8574, 8575, 8624, 8630, 8642, 8666, 8674, 8679, 8717, 8758, 8779, 8804, 8808, 8825, 8997, 9056, 9131, 9157, 9207, 9266, 9345, 9381, 9393, 9508, 9552, 9580, 9696, 9712, 9744, 9749, 9774, 9804, 9805, 9819, 9836, 9880, 9920, 9921, 9935, 9981},
		},
	}
	for _, tt := range testvalues {

		quicksort(tt.input)
		// fmt.Printf("Testing . Need %v \n%d\n. Got %v\n%d\n\n", tt.result, len(tt.result), tt.input, len(tt.input))
		if reflect.DeepEqual(tt.input, tt.result) == false {
			for k, val := range tt.input {
				if val != tt.result[k] {
					t.Fatalf("\nResult Mismatch .\n Need %d in %d \n\n Got %d in %d\n\n", tt.result[k], k, tt.input[k], k)
				}
			}
			t.Errorf("\n\n\nResult not matching .\n Need %v \n\n Got %v\n\n", tt.result, tt.input)
		}
	}
}

// func TestPartition(t *testing.T) {

// 	testvalues := []struct {
// 		input      []int
// 		idx, pivot int
// 	}{
// 		{
// 			input: []int{61, 7, 10, 12, 16, 4, 17}, idx: 6, pivot: 5,
// 		},
// 		{
// 			input: []int{61, 7, 10, 12, 16, 17, 4}, idx: 6, pivot: 0,
// 		},
// 		{
// 			input: []int{61, 12, 16, 17, 4, 7, 10}, idx: 6, pivot: 2,
// 		},
// 	}

// 	for _, tt := range testvalues {
// 		pivot := partition(tt.input)
// 		if pivot != tt.pivot {
// 			t.Errorf("\n\nPartition Expected - %v\n\nGot %v \n %v\n", tt.pivot, pivot, tt.input)
// 		}
// 	}
// }

func BenchmarkQuicksort(b *testing.B) {

	testvalues := []struct {
		input  []int
		result []int
	}{
		{
			input:  []int{61, 4, 7, 10, 12, 16, 17, 20, 21, 22, 30, 31, 39, 40, 51, 54, 55, 57, 60, 3, 62, 63, 76, 116, 119, 126, 128, 130, 131, 132, 133, 134, 136, 146, 151, 163, 166, 170, 172, 180, 184, 191, 198, 199, 204, 209, 217, 218, 221, 231, 232, 234, 237, 257, 258, 259, 262, 265, 272, 273, 277, 278, 286, 289, 291, 292, 293, 297, 303, 305, 309, 312, 317, 318, 322, 325, 326, 328, 329, 333, 340, 346, 353, 356, 359, 360, 368, 373, 378, 382, 383, 390, 394, 397, 401, 403, 413, 416, 418, 423, 425, 429, 432, 434, 435, 437, 438, 447, 451, 457, 458, 462, 463, 468, 474, 475, 480, 484, 493, 494, 508, 510, 526, 527, 529, 540, 547, 548, 552, 557, 561, 563, 567, 570, 571, 574, 576, 586, 588, 592, 596, 597, 602, 603, 604, 624, 625, 629, 632, 635, 639, 641, 643, 644, 647, 655, 656, 657, 661, 672, 673, 677, 679, 682, 684, 686, 696, 699, 703, 711, 712, 716, 718, 719, 720, 726, 728, 730, 738, 750, 751, 753, 754, 755, 765, 766, 768, 771, 780, 785, 788, 797, 798, 804, 809, 811, 814, 820, 825, 826, 827, 828, 829, 831, 832, 841, 843, 845, 846, 850, 860, 865, 867, 873, 879, 887, 892, 898, 906, 908, 909, 911, 917, 918, 920, 930, 937, 939, 950, 953, 958, 959, 966, 967, 972, 978, 981, 983, 987, 988, 996, 997, 1012, 1016, 1018, 1021, 1026, 1027, 1028, 1029, 1030, 1033, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1048, 1051, 1052, 1054, 1060, 1061, 1062, 1064, 1068, 1069, 1073, 1076, 1081, 1082, 1083, 1086, 1088, 1090, 1091, 1098, 1100, 1101, 1102, 1103, 1112, 1115, 1117, 1122, 1123, 1125, 1129, 1134, 1139, 1152, 1155, 1159, 1162, 1166, 1170, 1174, 1175, 1183, 1188, 1190, 1197, 1203, 1215, 1217, 1221, 1228, 1230, 1233, 1240, 1247, 1249, 1251, 1260, 1261, 1265, 1269, 1273, 1275, 1276, 1281, 1282, 1283, 1289, 1290, 1314, 1315, 1322, 1328, 1333, 1336, 1337, 1340, 1347, 1351, 1364, 1369, 1370, 1371, 1377, 1387, 1388, 1396, 1398, 1399, 1400, 1401, 1406, 1415, 1417, 1420, 1421, 1427, 1433, 1434, 1435, 1437, 1458, 1459, 1463, 1468, 1475, 1478, 1480, 1481, 1488, 1494, 1496, 1501, 1502, 1512, 1517, 1518, 1520, 1521, 1525, 1528, 1534, 1543, 1546, 1547, 1551, 1555, 1557, 1562, 1565, 1573, 1581, 1589, 1593, 1595, 1598, 1599, 1606, 1607, 1620, 1622, 1627, 1628, 1637, 1638, 1640, 1641, 1646, 1660, 1661, 1665, 1675, 1679, 1691, 1697, 1703, 1708, 1712, 1714, 1715, 1721, 1726, 1731, 1737, 1747, 1750, 1753, 1760, 1762, 1764, 1769, 1772, 1777, 1779, 1780, 1799, 1800, 1803, 1805, 1811, 1815, 1821, 1828, 1830, 1833, 1841, 1842, 1843, 1844, 1845, 1849, 1851, 1852, 1854, 1856, 1862, 1865, 1868, 1870, 1874, 1879, 1880, 1890, 1896, 1900, 1901, 1902, 1905, 1906, 1916, 1919, 1941, 1942, 1943, 1945, 1946, 1948, 1949, 1950, 1952, 1955, 1958, 1966, 1968, 1974, 1978, 1979, 1981, 1983, 1986, 1992, 1993, 1999},
			result: []int{3, 4, 7, 10, 12, 16, 17, 20, 21, 22, 30, 31, 39, 40, 51, 54, 55, 57, 60, 61, 62, 63, 76, 77, 78, 88, 90, 105, 108, 110, 116, 119, 126, 128, 130, 131, 132, 133, 134, 136, 146, 151, 163, 166, 170, 172, 180, 184, 191, 198, 199, 204, 209, 217, 218, 221, 231, 232, 234, 237, 257, 258, 259, 262, 265, 272, 273, 277, 278, 286, 289, 291, 292, 293, 297, 303, 305, 309, 312, 317, 318, 322, 325, 326, 328, 329, 333, 340, 346, 353, 356, 359, 360, 368, 373, 378, 382, 383, 390, 394, 397, 401, 403, 413, 416, 418, 423, 425, 429, 432, 434, 435, 437, 438, 447, 451, 457, 458, 462, 463, 468, 474, 475, 480, 484, 493, 494, 508, 510, 526, 527, 529, 540, 547, 548, 552, 557, 561, 563, 567, 570, 571, 574, 576, 586, 588, 592, 596, 597, 602, 603, 604, 624, 625, 629, 632, 635, 639, 641, 643, 644, 647, 655, 656, 657, 661, 672, 673, 677, 679, 682, 684, 686, 696, 699, 703, 711, 712, 716, 718, 719, 720, 726, 728, 730, 738, 750, 751, 753, 754, 755, 765, 766, 768, 771, 780, 785, 788, 797, 798, 804, 809, 811, 814, 820, 825, 826, 827, 828, 829, 831, 832, 841, 843, 845, 846, 850, 860, 865, 867, 873, 879, 887, 892, 898, 906, 908, 909, 911, 917, 918, 920, 930, 937, 939, 950, 953, 958, 959, 966, 967, 972, 978, 981, 983, 987, 988, 996, 997, 1012, 1016, 1018, 1021, 1026, 1027, 1028, 1029, 1030, 1033, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1048, 1051, 1052, 1054, 1060, 1061, 1062, 1064, 1068, 1069, 1073, 1076, 1081, 1082, 1083, 1086, 1088, 1090, 1091, 1098, 1100, 1101, 1102, 1103, 1112, 1115, 1117, 1122, 1123, 1125, 1129, 1134, 1139, 1152, 1155, 1159, 1162, 1166, 1170, 1174, 1175, 1183, 1188, 1190, 1197, 1203, 1215, 1217, 1221, 1228, 1230, 1233, 1240, 1247, 1249, 1251, 1260, 1261, 1265, 1269, 1273, 1275, 1276, 1281, 1282, 1283, 1289, 1290, 1314, 1315, 1322, 1328, 1333, 1336, 1337, 1340, 1347, 1351, 1364, 1369, 1370, 1371, 1377, 1387, 1388, 1396, 1398, 1399, 1400, 1401, 1406, 1415, 1417, 1420, 1421, 1427, 1433, 1434, 1435, 1437, 1458, 1459, 1463, 1468, 1475, 1478, 1480, 1481, 1488, 1494, 1496, 1501, 1502, 1512, 1517, 1518, 1520, 1521, 1525, 1528, 1534, 1543, 1546, 1547, 1551, 1555, 1557, 1562, 1565, 1573, 1581, 1589, 1593, 1595, 1598, 1599, 1606, 1607, 1620, 1622, 1627, 1628, 1637, 1638, 1640, 1641, 1646, 1660, 1661, 1665, 1675, 1679, 1691, 1697, 1703, 1708, 1712, 1714, 1715, 1721, 1726, 1731, 1737, 1747, 1750, 1753, 1760, 1762, 1764, 1769, 1772, 1777, 1779, 1780, 1799, 1800, 1803, 1805, 1811, 1815, 1821, 1828, 1830, 1833, 1841, 1842, 1843, 1844, 1845, 1849, 1851, 1852, 1854, 1856, 1862, 1865, 1868, 1870, 1874, 1879, 1880, 1890, 1896, 1900, 1901, 1902, 1905, 1906, 1916, 1919, 1941, 1942, 1943, 1945, 1946, 1948, 1949, 1950, 1952, 1955, 1958, 1966, 1968, 1974, 1978, 1979, 1981, 1983, 1986, 1992, 1993, 1999},
		},
	}

	for i := 0; i < b.N; i++ {

		quicksort(testvalues[0].input)
		if reflect.DeepEqual(testvalues[0].input, testvalues[0].result) {
			b.Errorf("Result not matching . Need %v . Got %v", testvalues[0].result, testvalues[0].input)
		}
	}
}
